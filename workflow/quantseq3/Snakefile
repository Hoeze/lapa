import pandas as pd


df_quantseq = pd.read_csv('configs/quantseq_sample.csv')


def star_index(wildcards):
    return config['genome']['star_index'][genome(wildcards)]


def fastq_quantseq(wildcards):
    _df = df_quantseq[
        (df_quantseq['sample'] == wildcards.sample)
        & (df_quantseq['rep'] == int(wildcards.rep))
    ]
    return _df.iloc[0]['fastq']


rule star_align:
    input:
        fq1 = fastq_quantseq,
        index = star_index
    threads: 8
    resources:
        mem_gb = 32
    output:
        bam = config['quantseq']['bam']
    log:
        "logs/star/quantseq_{sample}_{rep}.log"
    params:
        index = star_index,
        extra = "--outSAMtype BAM SortedByCoordinate --alignSJoverhangMin 20 --outSAMattributes All --outFilterMatchNminOverLread 0.3 --outFilterMismatchNoverLmax 0.7"
    wrapper:
        "0.72.0/bio/star/align"


rule count_quantseq_tailed:
    input:
        bam = config['quantseq']['bam']
    output:
        txt = 'data/results/quantseq/count_polyA/quantseq_{sample}_{rep}.txt'
    params:
        min_tail_len = 15
    threads: 1
    resources:
        mem_gb = 16
    script:
        "../common/lapa_count_tail.py"


rule count_quantseq:
    input:
        bam = config['quantseq']['bam']
    threads: 1
    resources:
        mem_gb = 4
    output:
        txt = 'data/results/quantseq/count/quantseq_{sample}_{rep}.txt'
    shell:
        "samtools view -F 4 -c {input.bam} > {output.txt}"


rule sample_csv_quantseq:
    input:
        bam = expand(config['quantseq']['bam'].format(
            sample='{{sample}}', rep='{rep}'), rep=['1', '2', '3'])
    params:
        bam = lambda x: config['quantseq']['bam']
    threads: 1
    resources:
        mem_gb = 1
    output:
        csv = config['lapa']['samples'].format(
            method='quantseq', sample='{sample}', count_read='tail')
    script:
        "./sample.py"


rule sample_csv_quantseq_end:
    input:
        bam = expand(config['quantseq']['bam_end'].format(
            sample='{{sample}}', rep='{rep}'), rep=['1', '2', '3'])
    params:
        bam = lambda x: config['quantseq']['bam_end']
    threads: 1
    resources:
        mem_gb = 1
    output:
        csv = config['lapa']['samples'].format(
            method='quantseq', sample='{sample}', count_read='end')
    script:
        "./sample.py"


rule lapa_quantseq:
    input:
        sample_csv = config['lapa']['samples'].format(
            method='quantseq', sample='{sample}', count_read='{count_read}'),
        fasta = fasta,
        gtf = gtf,
        chrom_sizes = chrom_sizes
    threads: 1
    resources:
        mem_gb = 16
    output:
        directory(config['lapa']['lapa_dir'])
    shell:
        "lapa \
        --alignment {input.sample_csv} \
        --fasta {input.fasta} \
        --annotation {input.gtf} \
        --chrom_sizes {input.chrom_sizes} \
        --method {wildcards.count_read} \
        --output_dir {output}"


rule compare_lapa_polya_atlas:
    input:
        lapa_tail = config['lapa']['lapa_dir'].format(
            sample='ES', count_read='tail', method='quantseq'),
        lapa_end = config['lapa']['lapa_dir'].format(
            sample='ES', count_read='end', method='quantseq'),
        polya_atlas = expand(config['quantseq']['polya_atlas'],
                             rep=[1, 2, 3], sample='ES')
    output:
        polya_enrichment = 'reports/figures/polya_enrichment.png',
        polya_rep = 'reports/figures/polya_replication.png'
    notebook:
        "./workflow/quantseq3/compare_polya_atlas.ipynb"


# rule merge_count_quantseq:
#     input:
#         count_raw = expand(
#             'data/results/quantseq/count/quantseq_{{sample}}_{rep}.txt',
#             rep=['1', '2', '3']
#         ),
#         count_polyA = expand(
#             'data/results/quantseq/count_polyA/quantseq_{{sample}}_{rep}.txt',
#             rep=['1', '2', '3']
#         )
#     resources:
#         mem_gb = 4
#     output:
#         csv = config['quantseq']['quantseq_count']
#     script:
#         "count.py"
