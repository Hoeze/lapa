rule download_read3:
    threads: 1
    resources:
        mem_gb = 4
    params:
        fq_dir = config['read3']['fastq_dir']
    output:
        fq = config['read3']['fastq']
    shell:
        "fasterq-dump {wildcards.srr_id} -t /tmp --outdir {params.fq_dir}"


rule reverse_complement_fastq:
    input:
        fq = config['read3']['fastq']
    output:
        fq = 'data/resources/read3/fastq/{srr_id}_rc.fastq'
    shell:
        "seqtk seq -r {input.fq} > {output.fq}"


rule star_index_mouse:
    input:
        fasta = config['mouse']['fasta'],
        gtf = config['mouse']['gtf']
    output:
        directory(config['star']['mouse_index'])
    log:
        "logs/star_index_mouse.log"
    threads: 32
    resources:
        mem_gb = 128
    wrapper:
        "0.72.0/bio/star/index"


rule star_align_read3:
    input:
        fq1 = (lambda wildcards: [
            'data/resources/read3/fastq/{srr_id}_rc.fastq'.format(
                srr_id=srr_id)
            for srr_id in config['read3']['geo_ids'][wildcards.geo_id]
        ]),
        index = config['star']['mouse_index']
    threads: 8
    resources:
        mem_gb = 32
    output:
        bam = config['read3']['bam']
    log:
        "logs/star/read3_{geo_id}.log"
    params:
        index = config['star']['mouse_index'],
        extra = "--outSAMtype BAM SortedByCoordinate --alignSJoverhangMin 10 --outSAMattributes All"
    wrapper:
        "0.72.0/bio/star/align"


rule count_read3:
    input:
        bam = config['read3']['bam']
    threads: 1
    resources:
        mem_gb = 4
    output:
        txt = 'data/results/read3/count/read3_{geo_id}.txt'
    shell:
        "samtools view -F 4 -c {input.bam} > {output.txt}"


# rule count_polyA_read3:
#     input:
#         bam = config['read3']['bam']
#     resources:
#         mem_gb = 4
#     output:
#         txt = 'data/results/read3/count_polyA/read3_{geo_id}.txt'
#     shell:
#         "zcat {input.fastq} | grep '>' | wc -l > {output.txt}"


rule merge_count_read3:
    input:
        count_raw = expand(
            'data/results/read3/count/read3_{geo_id}.txt',
            geo_id=config['read3']['geo_ids'].keys()
        )
    resources:
        mem_gb = 4
    output:
        csv = config['read3']['read3_count']
    script:
        "count.py"


rule lapa_config_read3_c2c12:
    input:
        expand(config['read3']['bam'],
               geo_id=config['read3']['geo_ids'].keys())
    output:
        config = "data/results/read3/lapa_config.csv"
    run:
        import pandas as pd
        samples = [
            'GSM1518115',
            'GSM1518116',
            'GSM1518117',
            'GSM1518118'
        ]
        pd.DataFrame({
            'sample': ['c2c12_pro', 'c2c12_pro', 'c2c12_diff', 'c2c12_diff'],
            'path': [
                config['read3']['bam'].format(geo_id=i)
                for i in samples
            ]
        }).to_csv(output.config, index=False)


rule lapa_read3_c2c12:
    input:
        config = "data/results/read3/lapa_config.csv",
        fasta = config['mouse']['fasta'],
        gtf = config['mouse']['gtf'],
        chrom_sizes = config['common']['chrom_sizes'].format(specie='mouse')
    threads: 1
    resources:
        mem_gb = 16
    output:
        directory(config['lapa']['read3_dir'].format(sample='c2c12'))
    shell:
        "lapa \
        --alignment {input.config} \
        --fasta {input.fasta} \
        --annotation {input.gtf} \
        --method end \
        --chrom_sizes {input.chrom_sizes} \
        --output_dir {output}"
