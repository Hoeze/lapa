rule download_gm12_reads:
    resources:
        mem_gb = 4
    output:
        bam = config['long_read']['gm12878']['bam']
    shell:
        "wget https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.bam -O {output}"


rule count_gm12_pacbio:
    input:
        bam = config['long_read']['gm12878']['bam']
    output:
        txt = 'data/results/gm12878/count/{encode_id}.txt'
    threads: 1
    resources:
        mem_gb = 16
    shell:
        "samtools view -F 4 -c {input.bam} > {output.txt}"


rule lapa_longreads_gm12:
    input:
        alignment = config['long_read']['gm12878']['read_annot'],
        fasta = config['human']['fasta'],
        gtf = config['human']['gtf'],
        chrom_sizes = config['common']['chrom_sizes'].format(specie='human')
    threads: 1
    resources:
        mem_gb = 16
    output:
        directory(config['lapa']['long_rna_dir'].format(sample='gm12878'))
    shell:
        "lapa \
        --alignment {input.alignment} \
        --fasta {input.fasta} \
        --annotation {input.gtf} \
        --chrom_sizes {input.chrom_sizes} \
        --output_dir {output}"


rule lapa_gm12878_short_reads:
    input:
        bam = expand(config['short_rnaseq']['bam'],
                     encode_id=config['short_rnaseq']['data']['gm12878'],
                     sample='gm12878'),
        fasta = fasta,
        gtf = gtf,
        chrom_sizes = chrom_sizes
    threads: 1
    resources:
        mem_gb = 16
    output:
        directory(config['lapa']['short_rna_dir'])
    run:
        alignment = ','.join(input.bam)
        shell(f'lapa \
        --alignment "{alignment}" \
        --fasta {input.fasta} \
        --annotation {input.gtf} \
        --chrom_sizes {input.chrom_sizes} \
        --method tail \
        --output_dir {output}')


rule sample_gm12878_quantseq:
    input:
        bam = expand(config['quantseq']['bam'], rep=['1', '2'])
    output:
        csv = config['lapa']['samples'].format(
            sample='gm12878', method='quantseq')
    run:
        bam = config['quantseq']['bam']
        with open(output['csv'], 'w') as f:
            f.write('sample,path\n')
            for i in ['1', '2']:
                f.write(f'gm12878_{i},{bam.format(rep=i)}\n')


rule lapa_gm12878_quantseq:
    input:
        sample_csv = config['lapa']['samples'].format(
            sample='gm12878', method='quantseq'),
        fasta = fasta,
        gtf = gtf,
        chrom_sizes = chrom_sizes
    threads: 1
    resources:
        mem_gb = 16
    output:
        directory(config['lapa']['quantseq_dir'])
    shell:
        "lapa \
        --alignment {input.sample_csv} \
        --fasta {input.fasta} \
        --annotation {input.gtf} \
        --chrom_sizes {input.chrom_sizes} \
        --method tail \
        --output_dir {output}"


rule overlap_gm12_pac_talon:
    input:
        lapa_dir = config['lapa']['quantseq_dir'].format(
            sample='gm12878'),
        gtf = config['long_read']['gm12878']['gtf_pb'],
        abundance = config['long_read']['gm12878']['abundance']
    params:
        max_distance = 50,
        samples = ['gm12878_1', 'gm12878_2'],
    output:
        overlap = 'data/results/gm12878/overlap/gm12878_overlap_pb_annotation.csv'
    script:
        "../common/overlap_talon.py"


rule overlap_gm12_nanopor_talon:
    input:
        lapa_dir = config['lapa']['quantseq_dir'].format(sample='gm12878'),
        gtf = config['long_read']['gm12878']['gtf_ont'],
        abundance = config['long_read']['gm12878']['abundance']
    params:
        max_distance = 50,
        samples = ['gm12878_1', 'gm12878_2']
    output:
        overlap = 'data/results/gm12878/overlap/gm12878_overlap_ont_annotation.csv'
    script:
        "../common/overlap_talon.py"


rule plot_overlap_gm12:
    input:
        'data/results/gm12878/overlap/{sample}_overlap_{platform}_annotation.csv'
    output:
        'reports/figures/{sample}_overlap_{platform}_annotation.png'
    script:
        "../common/plot_fig4.R"


rule correct_gtf_pac_talon:
    input:
        read_annot = config['long_read']['gm12878']['read_annot'],
        lapa_dir = config['lapa']['long_rna_dir'].format(sample='gm12878'),
        gtf = config['long_read']['gm12878']['gtf_pb'],
        fasta = config['human']['fasta']
    params:
        samples = ['gm12878_1', 'gm12878_2']
    output:
        gtf = config['long_read']['gm12878']['gtf_pb_cor']
    script:
        "../common/correct_gtf.py"


rule correct_gtf_ont_talon:
    input:
        read_annot = config['long_read']['gm12878']['read_annot'],
        lapa_dir = config['lapa']['long_rna_dir'].format(sample='gm12878'),
        gtf = config['long_read']['gm12878']['gtf_ont'],
        fasta = config['human']['fasta']
    params:
        samples = ['gm12878_1', 'gm12878_2']
    output:
        gtf = config['long_read']['gm12878']['gtf_ont_cor']
    script:
        "../common/correct_gtf.py"


rule overlap_gm12_corr_talon:
    input:
        lapa_dir = config['lapa']['quantseq_dir'].format(sample='gm12878'),
        gtf = (lambda wildcards: config['long_read']
               ['gm12878']['gtf_%s' % wildcards['platform']]),
        abundance = config['long_read']['gm12878']['abundance']
    params:
        max_distance = 50
    output:
        overlap = 'data/results/gm12878/overlap/{sample}_overlap_{platform}_annotation.csv'
    script:
        "../common/overlap_talon.py"


rule overlap_cage_gm12:
    input:
        cage = [
            config['cage']['gm12878']['rep1'],
            config['cage']['gm12878']['rep2']
        ],
        gtf = (lambda wildcards: config['long_read']
               ['gm12878']['gtf_%s' % wildcards['platform']]),
        abundance = config['long_read']['gm12878']['abundance']
    params:
        max_distance = 50
    output:
        overlap = 'data/results/gm12878/overlap_cage/{sample}_overlap_{platform}_annotation.csv'
    script:
        "../common/overlap_cage_talon.py"


rule plot_cage_overlap_gm12:
    input:
        'data/results/gm12878/overlap_cage/{sample}_overlap_{platform}_annotation.csv'
    output:
        'reports/figures/{sample}_overlap_cage_{platform}_annotation.png'
    script:
        "../common/plot_fig4.R"
