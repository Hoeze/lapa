rule download_short_reads:
    resources:
        mem_gb = 4
    output:
        config['short_rnaseq']['fastq']
    shell:
        "wget https://www.encodeproject.org/files/{wildcards.encode_id}/@@download/{wildcards.encode_id}.fastq.gz -O {output}"


# rule filter_reads_with_polyA_tail:
#     input:
#         fastq = config['short_rnaseq']['fastq']
#     params:
#         pattern = "A" * 20,
#         mismatch = 0
#     resources:
#         mem_gb = 8
#     output:
#         fastq = config['short_rnaseq']['polyA_trimmed']
#     shell:
#         '''
#         seqkit grep --by-seq --max-mismatch {params.mismatch} \
#         --pattern {params.pattern} {input.fastq} | gzip > {output.fastq}
#         '''

rule star_align:
    input:
        fq1 = config['short_rnaseq']['fastq'],
        index = config['star']['star_index']
    output:
        bam = config['short_rnaseq']['bam']
    log:
        "logs/star/illumina_{sample}_{encode_id}.log"
    params:
        index = config['star']['star_index'],
        extra = "--outSAMtype BAM SortedByCoordinate --alignSJoverhangMin 10 --outSAMattributes All"
    threads: 8
    resources:
        threads = 8,
        mem_gb = 64
    wrapper:
        "0.74.0/bio/star/align"


rule count_raw_short_reads:
    input:
        bam = config['short_rnaseq']['bam']
    resources:
        mem_gb = 4
    output:
        txt = 'data/results/short_rnaseq/{sample}/counts/{encode_id}.txt'
    shell:
        "samtools view -F 4 -c {input.bam} > {output.txt}"


rule count_read3_tailed:
    input:
        bam = config['short_rnaseq']['bam']
    output:
        txt = 'data/results/short_rnaseq/{sample}/counts_polyA/{encode_id}.txt'
    threads: 1
    resources:
        mem_gb = 16
    script:
        "../common/lapa_count_tail.py"


rule count_short_read:
    input:
        count_raw_dir = (lambda wildcards: expand(
            'data/results/short_rnaseq/{sample}/counts/{encode_id}.txt',
            sample=wildcards['sample'],
            encode_id=config['short_rnaseq']['data'][wildcards['sample']]
        )),
        count_dir = (lambda wildcards: expand(
            'data/results/short_rnaseq/{sample}/counts_polyA/{encode_id}.txt',
            sample=wildcards['sample'],
            encode_id=config['short_rnaseq']['data'][wildcards['sample']]
        ))
    resources:
        mem_gb = 4
    output:
        csv = config['short_rnaseq']['short_count']
    script:
        "count.py"


# rule merge_short_reads:
#     input:
#         bams = (lambda wildcards: expand(
#             config['short_rnaseq']['bam'],
#             encode_id=config['short_rnaseq']['data'][wildcards.sample],
#             sample=wildcards.sample))
#     threads: 1
#     resources:
#         mem_gb = 32
#     output:
#         bam = config['short_rnaseq']['merged_bam']
#     run:
#         bams = ' '.join(input['bams'])
#         shell("samtools merge {output.bam} {bams}")
